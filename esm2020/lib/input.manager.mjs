export class InputManager {
    constructor(_htmlInputElement) {
        this._htmlInputElement = _htmlInputElement;
        this._storedRawValue = null;
    }
    setCursorAt(position) {
        this._htmlInputElement.focus();
        this._htmlInputElement.setSelectionRange(position, position);
    }
    updateValueAndCursor(newRawValue, oldLength, selectionStart) {
        this.rawValue = newRawValue;
        const newLength = newRawValue.length;
        selectionStart = selectionStart - (oldLength - newLength);
        this.setCursorAt(selectionStart);
    }
    get canInputMoreNumbers() {
        const onlyNumbers = this.rawValue?.replace(/[^0-9\u0660-\u0669\u06F0-\u06F9]/g, '') ?? '';
        const hasReachedMaxLength = !(onlyNumbers.length >= this._htmlInputElement.maxLength &&
            this._htmlInputElement.maxLength >= 0);
        const selectionStart = this.inputSelection.selectionStart;
        const selectionEnd = this.inputSelection.selectionEnd;
        const haveNumberSelected = !!(selectionStart != selectionEnd &&
            this._htmlInputElement.value
                .substring(selectionStart, selectionEnd)
                .match(/[^0-9\u0660-\u0669\u06F0-\u06F9]/));
        const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';
        return hasReachedMaxLength || haveNumberSelected || startWithZero;
    }
    get inputSelection() {
        return {
            selectionStart: this._htmlInputElement.selectionStart ?? 0,
            selectionEnd: this._htmlInputElement.selectionEnd ?? 0,
        };
    }
    get rawValue() {
        return this._htmlInputElement && this._htmlInputElement.value;
    }
    set rawValue(value) {
        this._storedRawValue = value;
        if (this._htmlInputElement) {
            this._htmlInputElement.value = value ?? '';
        }
    }
    get storedRawValue() {
        return this._storedRawValue || '';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQubWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jdXJyZW5jeS9zcmMvbGliL2lucHV0Lm1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFlBQVk7SUFHdkIsWUFBNkIsaUJBQW1DO1FBQW5DLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBa0I7UUFGeEQsb0JBQWUsR0FBa0IsSUFBSSxDQUFDO0lBRXFCLENBQUM7SUFFcEUsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxvQkFBb0IsQ0FDbEIsV0FBbUIsRUFDbkIsU0FBaUIsRUFDakIsY0FBc0I7UUFFdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDNUIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxjQUFjLEdBQUcsY0FBYyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ3JCLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLG1DQUFtQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4RSxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FDM0IsV0FBVyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUztZQUN0RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FDdEMsQ0FBQztRQUNGLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDO1FBQzFELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBQ3RELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQzNCLGNBQWMsSUFBSSxZQUFZO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLO2lCQUN6QixTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQztpQkFDdkMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQzdDLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQzFFLE9BQU8sbUJBQW1CLElBQUksa0JBQWtCLElBQUksYUFBYSxDQUFDO0lBQ3BFLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFJaEIsT0FBTztZQUNMLGNBQWMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxJQUFJLENBQUM7WUFDMUQsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLElBQUksQ0FBQztTQUN2RCxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7SUFDaEUsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLEtBQW9CO1FBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSW5wdXRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfc3RvcmVkUmF3VmFsdWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2h0bWxJbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQpIHt9XG5cbiAgc2V0Q3Vyc29yQXQocG9zaXRpb246IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQuZm9jdXMoKTtcbiAgICB0aGlzLl9odG1sSW5wdXRFbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbik7XG4gIH1cblxuICB1cGRhdGVWYWx1ZUFuZEN1cnNvcihcbiAgICBuZXdSYXdWYWx1ZTogc3RyaW5nLFxuICAgIG9sZExlbmd0aDogbnVtYmVyLFxuICAgIHNlbGVjdGlvblN0YXJ0OiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5yYXdWYWx1ZSA9IG5ld1Jhd1ZhbHVlO1xuICAgIGNvbnN0IG5ld0xlbmd0aCA9IG5ld1Jhd1ZhbHVlLmxlbmd0aDtcbiAgICBzZWxlY3Rpb25TdGFydCA9IHNlbGVjdGlvblN0YXJ0IC0gKG9sZExlbmd0aCAtIG5ld0xlbmd0aCk7XG4gICAgdGhpcy5zZXRDdXJzb3JBdChzZWxlY3Rpb25TdGFydCk7XG4gIH1cblxuICBnZXQgY2FuSW5wdXRNb3JlTnVtYmVycygpOiBib29sZWFuIHtcbiAgICBjb25zdCBvbmx5TnVtYmVycyA9XG4gICAgICB0aGlzLnJhd1ZhbHVlPy5yZXBsYWNlKC9bXjAtOVxcdTA2NjAtXFx1MDY2OVxcdTA2RjAtXFx1MDZGOV0vZywgJycpID8/ICcnO1xuICAgIGNvbnN0IGhhc1JlYWNoZWRNYXhMZW5ndGggPSAhKFxuICAgICAgb25seU51bWJlcnMubGVuZ3RoID49IHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQubWF4TGVuZ3RoICYmXG4gICAgICB0aGlzLl9odG1sSW5wdXRFbGVtZW50Lm1heExlbmd0aCA+PSAwXG4gICAgKTtcbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHRoaXMuaW5wdXRTZWxlY3Rpb24uc2VsZWN0aW9uU3RhcnQ7XG4gICAgY29uc3Qgc2VsZWN0aW9uRW5kID0gdGhpcy5pbnB1dFNlbGVjdGlvbi5zZWxlY3Rpb25FbmQ7XG4gICAgY29uc3QgaGF2ZU51bWJlclNlbGVjdGVkID0gISEoXG4gICAgICBzZWxlY3Rpb25TdGFydCAhPSBzZWxlY3Rpb25FbmQgJiZcbiAgICAgIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQudmFsdWVcbiAgICAgICAgLnN1YnN0cmluZyhzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgICAgICAubWF0Y2goL1teMC05XFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XS8pXG4gICAgKTtcbiAgICBjb25zdCBzdGFydFdpdGhaZXJvID0gdGhpcy5faHRtbElucHV0RWxlbWVudC52YWx1ZS5zdWJzdHJpbmcoMCwgMSkgPT0gJzAnO1xuICAgIHJldHVybiBoYXNSZWFjaGVkTWF4TGVuZ3RoIHx8IGhhdmVOdW1iZXJTZWxlY3RlZCB8fCBzdGFydFdpdGhaZXJvO1xuICB9XG5cbiAgZ2V0IGlucHV0U2VsZWN0aW9uKCk6IHtcbiAgICBzZWxlY3Rpb25TdGFydDogbnVtYmVyO1xuICAgIHNlbGVjdGlvbkVuZDogbnVtYmVyO1xuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uU3RhcnQ6IHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPz8gMCxcbiAgICAgIHNlbGVjdGlvbkVuZDogdGhpcy5faHRtbElucHV0RWxlbWVudC5zZWxlY3Rpb25FbmQgPz8gMCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHJhd1ZhbHVlKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9odG1sSW5wdXRFbGVtZW50ICYmIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQudmFsdWU7XG4gIH1cbiAgc2V0IHJhd1ZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgdGhpcy5fc3RvcmVkUmF3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLl9odG1sSW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLl9odG1sSW5wdXRFbGVtZW50LnZhbHVlID0gdmFsdWUgPz8gJyc7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHN0b3JlZFJhd1ZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlZFJhd1ZhbHVlIHx8ICcnO1xuICB9XG59XG4iXX0=