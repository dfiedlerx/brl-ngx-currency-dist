export class InputManager {
    constructor(_htmlInputElement) {
        this._htmlInputElement = _htmlInputElement;
        this._storedRawValue = null;
    }
    setCursorAt(position) {
        this._htmlInputElement.focus();
        this._htmlInputElement.setSelectionRange(position, position);
    }
    updateValueAndCursor(newRawValue, oldLength, selectionStart) {
        this.rawValue = newRawValue;
        const newLength = newRawValue.length;
        selectionStart = selectionStart - (oldLength - newLength);
        this.setCursorAt(selectionStart);
    }
    get canInputMoreNumbers() {
        const onlyNumbers = this.rawValue?.replace(/[^0-9\u0660-\u0669\u06F0-\u06F9]/g, '') ?? '';
        const hasReachedMaxLength = !(onlyNumbers.length >= this._htmlInputElement.maxLength &&
            this._htmlInputElement.maxLength >= 0);
        const selectionStart = this.inputSelection.selectionStart;
        const selectionEnd = this.inputSelection.selectionEnd;
        const haveNumberSelected = !!(selectionStart != selectionEnd &&
            this._htmlInputElement.value
                .substring(selectionStart, selectionEnd)
                .match(/[^0-9\u0660-\u0669\u06F0-\u06F9]/));
        const startWithZero = this._htmlInputElement.value.substring(0, 1) == '0';
        return hasReachedMaxLength || haveNumberSelected || startWithZero;
    }
    get inputSelection() {
        return {
            selectionStart: this._htmlInputElement.selectionStart ?? 0,
            selectionEnd: this._htmlInputElement.selectionEnd ?? 0,
        };
    }
    get rawValue() {
        return this._htmlInputElement && this._htmlInputElement.value;
    }
    set rawValue(value) {
        this._storedRawValue = value;
        if (this._htmlInputElement) {
            this._htmlInputElement.value = value ?? '';
        }
    }
    get storedRawValue() {
        return this._storedRawValue || '';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQubWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jdXJyZW5jeS9zcmMvbGliL2lucHV0Lm1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFlBQVk7SUFHdkIsWUFBNkIsaUJBQW1DO1FBQW5DLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBa0I7UUFGeEQsb0JBQWUsR0FBa0IsSUFBSSxDQUFDO0lBRXFCLENBQUM7SUFFcEUsV0FBVyxDQUFDLFFBQWdCO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxvQkFBb0IsQ0FDbEIsV0FBbUIsRUFDbkIsU0FBaUIsRUFDakIsY0FBc0I7UUFFdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7UUFDNUIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxjQUFjLEdBQUcsY0FBYyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELElBQUksbUJBQW1CO1FBQ3JCLE1BQU0sV0FBVyxHQUNmLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLG1DQUFtQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN4RSxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FDM0IsV0FBVyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUztZQUN0RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FDdEMsQ0FBQztRQUNGLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDO1FBQzFELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDO1FBQ3RELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQzNCLGNBQWMsSUFBSSxZQUFZO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLO2lCQUN6QixTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQztpQkFDdkMsS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQzdDLENBQUM7UUFDRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1FBQzFFLE9BQU8sbUJBQW1CLElBQUksa0JBQWtCLElBQUksYUFBYSxDQUFDO0lBQ3BFLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFJaEIsT0FBTztZQUNMLGNBQWMsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxJQUFJLENBQUM7WUFDMUQsWUFBWSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLElBQUksQ0FBQztTQUN2RCxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7SUFDaEUsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLEtBQW9CO1FBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBRTdCLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzdDLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7SUFDcEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElucHV0TWFuYWdlciB7XG4gIHByaXZhdGUgX3N0b3JlZFJhd1ZhbHVlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9odG1sSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSB7fVxuXG4gIHNldEN1cnNvckF0KHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9odG1sSW5wdXRFbGVtZW50LmZvY3VzKCk7XG4gICAgdGhpcy5faHRtbElucHV0RWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZShwb3NpdGlvbiwgcG9zaXRpb24pO1xuICB9XG5cbiAgdXBkYXRlVmFsdWVBbmRDdXJzb3IoXG4gICAgbmV3UmF3VmFsdWU6IHN0cmluZyxcbiAgICBvbGRMZW5ndGg6IG51bWJlcixcbiAgICBzZWxlY3Rpb25TdGFydDogbnVtYmVyLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnJhd1ZhbHVlID0gbmV3UmF3VmFsdWU7XG4gICAgY29uc3QgbmV3TGVuZ3RoID0gbmV3UmF3VmFsdWUubGVuZ3RoO1xuICAgIHNlbGVjdGlvblN0YXJ0ID0gc2VsZWN0aW9uU3RhcnQgLSAob2xkTGVuZ3RoIC0gbmV3TGVuZ3RoKTtcbiAgICB0aGlzLnNldEN1cnNvckF0KHNlbGVjdGlvblN0YXJ0KTtcbiAgfVxuXG4gIGdldCBjYW5JbnB1dE1vcmVOdW1iZXJzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG9ubHlOdW1iZXJzID1cbiAgICAgIHRoaXMucmF3VmFsdWU/LnJlcGxhY2UoL1teMC05XFx1MDY2MC1cXHUwNjY5XFx1MDZGMC1cXHUwNkY5XS9nLCAnJykgPz8gJyc7XG4gICAgY29uc3QgaGFzUmVhY2hlZE1heExlbmd0aCA9ICEoXG4gICAgICBvbmx5TnVtYmVycy5sZW5ndGggPj0gdGhpcy5faHRtbElucHV0RWxlbWVudC5tYXhMZW5ndGggJiZcbiAgICAgIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQubWF4TGVuZ3RoID49IDBcbiAgICApO1xuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5pbnB1dFNlbGVjdGlvbi5zZWxlY3Rpb25TdGFydDtcbiAgICBjb25zdCBzZWxlY3Rpb25FbmQgPSB0aGlzLmlucHV0U2VsZWN0aW9uLnNlbGVjdGlvbkVuZDtcbiAgICBjb25zdCBoYXZlTnVtYmVyU2VsZWN0ZWQgPSAhIShcbiAgICAgIHNlbGVjdGlvblN0YXJ0ICE9IHNlbGVjdGlvbkVuZCAmJlxuICAgICAgdGhpcy5faHRtbElucHV0RWxlbWVudC52YWx1ZVxuICAgICAgICAuc3Vic3RyaW5nKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpXG4gICAgICAgIC5tYXRjaCgvW14wLTlcXHUwNjYwLVxcdTA2NjlcXHUwNkYwLVxcdTA2RjldLylcbiAgICApO1xuICAgIGNvbnN0IHN0YXJ0V2l0aFplcm8gPSB0aGlzLl9odG1sSW5wdXRFbGVtZW50LnZhbHVlLnN1YnN0cmluZygwLCAxKSA9PSAnMCc7XG4gICAgcmV0dXJuIGhhc1JlYWNoZWRNYXhMZW5ndGggfHwgaGF2ZU51bWJlclNlbGVjdGVkIHx8IHN0YXJ0V2l0aFplcm87XG4gIH1cblxuICBnZXQgaW5wdXRTZWxlY3Rpb24oKToge1xuICAgIHNlbGVjdGlvblN0YXJ0OiBudW1iZXI7XG4gICAgc2VsZWN0aW9uRW5kOiBudW1iZXI7XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3Rpb25TdGFydDogdGhpcy5faHRtbElucHV0RWxlbWVudC5zZWxlY3Rpb25TdGFydCA/PyAwLFxuICAgICAgc2VsZWN0aW9uRW5kOiB0aGlzLl9odG1sSW5wdXRFbGVtZW50LnNlbGVjdGlvbkVuZCA/PyAwLFxuICAgIH07XG4gIH1cblxuICBnZXQgcmF3VmFsdWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQgJiYgdGhpcy5faHRtbElucHV0RWxlbWVudC52YWx1ZTtcbiAgfVxuICBzZXQgcmF3VmFsdWUodmFsdWU6IHN0cmluZyB8IG51bGwpIHtcbiAgICB0aGlzLl9zdG9yZWRSYXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2h0bWxJbnB1dEVsZW1lbnQudmFsdWUgPSB2YWx1ZSA/PyAnJztcbiAgICB9XG4gIH1cblxuICBnZXQgc3RvcmVkUmF3VmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmVkUmF3VmFsdWUgfHwgJyc7XG4gIH1cbn1cbiJdfQ==